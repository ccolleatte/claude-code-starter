# CLAUDE-VALIDATION.md - Anti-Bullshit & Validation Stricte

## üö® R√àGLE ABSOLUE : Preuves Obligatoires

### ‚ùå INTERDIT - Affirmations Sans Preuve

```markdown
‚ùå "Les tests passent"
‚ùå "Le build fonctionne"  
‚ùå "C'est corrig√©"
‚ùå "√áa devrait marcher"
‚ùå "Am√©lioration significative"
‚ùå "Excellent r√©sultat"
```

### ‚úÖ OBLIGATOIRE - Affirmations Avec Preuve

```markdown
‚úÖ "Test auth.test.js passe (ligne 47: ‚úì should authenticate user)"
‚úÖ "Build r√©ussi en 12.3s (voir output ligne 234)"
‚úÖ "Bug #1234 corrig√©: TypeError r√©solu ligne 89 de user.js"
‚úÖ "Performance: 450ms ‚Üí 120ms (-73%, benchmark ligne 67)"
```

## üìã Checklist Validation OBLIGATOIRE

### Avant CHAQUE affirmation, je dois :

```markdown
‚ñ° Ai-je ex√©cut√© la commande r√©ellement ?
‚ñ° Puis-je citer la ligne exacte de l'output ?
‚ñ° Ai-je les m√©triques before/after ?
‚ñ° Est-ce quantifi√© pr√©cis√©ment ?
‚ñ° Ai-je √©vit√© tout superlatif ?
‚ñ° Ai-je admis les limitations ?
```

### Si une seule case non coch√©e ‚Üí NE PAS AFFIRMER

## üîç Workflow de Validation Strict

### 1. Ex√©cution avec Capture
```bash
# TOUJOURS capturer l'output
npm test 2>&1 | tee test-results.log

# Avec timestamp pour preuve
echo "=== Test run at $(date) ===" && npm test
```

### 2. Analyse TAP D√©taill√©e
```markdown
Compter manuellement:
- Nombre de "ok" : X
- Nombre de "not ok" : Y  
- Tests skipped : Z
- Dur√©e totale : T secondes

Identifier pr√©cis√©ment:
- Ligne de chaque √©chec
- Message d'erreur exact
- Stack trace complet
```

### 3. Rapport Factuel
```markdown
Format obligatoire:
"R√©sultats: X/Y tests passent
- √âchecs: [liste avec num√©ros de ligne]
- Erreur principale: [message exact]
- Temps: Tms
- Action: [ce que je vais corriger]"
```

## üéØ Language de Pr√©cision

### Vocabulaire Interdit vs Obligatoire

| ‚ùå INTERDIT | ‚úÖ OBLIGATOIRE |
|-------------|----------------|
| "C'est bon" | "Test X ligne Y: passed" |
| "√áa marche" | "Fonction retourne [valeur] comme attendu" |
| "Beaucoup mieux" | "R√©duction de X √† Y (-Z%)" |
| "Optimis√©" | "Complexit√© O(n¬≤) ‚Üí O(n log n)" |
| "Refactoris√©" | "Extrait 3 m√©thodes, 87‚Üí62 lignes" |
| "Tout est OK" | "23/23 tests passent, coverage 91%" |

### Formulations Pr√©cises

```markdown
# Au lieu de : "J'ai am√©lior√© les performances"
‚úÖ "Temps d'ex√©cution: 1200ms ‚Üí 450ms (-62.5%)
    Mesure: performance.now() ligne 34-78
    M√©thode: Mise en cache des r√©sultats"

# Au lieu de : "Bug corrig√©"  
‚úÖ "Fix TypeError ligne 89:
    - Cause: user.name undefined
    - Solution: Ajout guard clause ligne 87
    - Test: user.test.js:45 valide le fix"
```

## üî¨ M√©triques Obligatoires

### Pour chaque modification

```markdown
AVANT:
- Metric: [valeur]
- Source: [commande/fichier:ligne]
- Timestamp: [heure]

APR√àS:
- Metric: [nouvelle valeur]  
- Delta: [diff√©rence] ([pourcentage]%)
- Validation: [test qui confirme]
```

### Exemples Concrets

```bash
# Performance
AVANT: Response time: 1250ms (measured: curl -w "%{time_total}")
APR√àS: Response time: 320ms (-74.4%)

# Code Quality
AVANT: Complexity: 15 (eslint complexity report)
APR√àS: Complexity: 8 (-46.7%)

# Test Coverage
AVANT: Coverage: 67% (jest --coverage)
APR√àS: Coverage: 91% (+24 points)
```

## üö´ D√©tection des Hallucinations

### Signaux d'Alerte

```markdown
üî¥ Affirmation sans commande ex√©cut√©e
üî¥ R√©f√©rence √† output non montr√©
üî¥ Tests qui passent du premier coup sans code
üî¥ Am√©lioration "magique" sans changement clair
üî¥ Utilisation de superlatifs
üî¥ Manque de num√©ros de ligne/fichiers
```

### Proc√©dure si Hallucination D√©tect√©e

```bash
# 1. STOP imm√©diat
echo "HALLUCINATION DETECTED: [description]"

# 2. Rollback
git diff  # Voir les changements
git reset --hard HEAD  # Annuler

# 3. Diagnostic
grep -n "pattern" src/  # V√©rifier si existe vraiment
find . -name "*.js" -exec grep -l "function" {} \;

# 4. Redemander avec contexte
"Montre-moi d'abord le fichier X ligne Y"
"Ex√©cute la commande Z et montre l'output complet"
```

## üìä Formats de Rapport

### Rapport de Test
```markdown
TEST EXECUTION REPORT
====================
Timestamp: 2024-01-15 14:32:45
Command: npm test

Results:
- Total: 45 tests
- Passed: 42 (93.3%)  
- Failed: 3 (6.7%)
- Duration: 4.7s

Failed Tests:
1. auth.test.js:34 - "should reject invalid token"
   Error: Expected 401, received 200
2. user.test.js:89 - "should validate email"
   Error: Regex pattern mismatch
3. api.test.js:156 - "should handle timeout"
   Error: Timeout after 5000ms

Next Actions:
- Fix auth middleware (src/auth.js:67)
- Update email regex (src/validators.js:23)
- Increase timeout or optimize query
```

### Rapport de Performance
```markdown
PERFORMANCE ANALYSIS
===================
Baseline: commit a4f3d2e (2024-01-14)
Current: commit b7c9f1a (2024-01-15)

Metrics:
| Operation | Before | After | Change |
|-----------|--------|-------|--------|
| API /users | 230ms | 87ms | -62.2% |
| DB query | 145ms | 43ms | -70.3% |
| Build time | 34s | 21s | -38.2% |

Validation:
- Benchmark: npm run benchmark (see benchmark.json)
- Load test: 1000 req/s sustained
- No regression in other endpoints
```

## ‚úÖ Admission d'Incertitude

### Phrases Encourag√©es

```markdown
‚úÖ "Je n'ai pas encore test√© X"
‚úÖ "Il reste 3 tests qui √©chouent"
‚úÖ "Cette solution est partielle"
‚úÖ "Impact sur Y non mesur√©"
‚úÖ "Besoin de validation suppl√©mentaire"
‚úÖ "Hypoth√®se: [X], √† confirmer par test"
```

### Template R√©ponse Incertaine

```markdown
Status: Partiellement r√©solu
- Confirm√©: [ce qui marche avec preuve]
- Non test√©: [ce qui reste √† valider]  
- Risques: [impacts possibles]
- Prochaines √©tapes: [actions concr√®tes]
```

## üé¨ Exemples de Validation Correcte

### Exemple 1: Fix de Bug
```bash
$ npm test auth.test.js
  auth module
    ‚úì should authenticate valid user (45ms)
    ‚úó should reject invalid token
      Expected: 401
      Received: 200
      at auth.test.js:34

$ vim src/auth.js  # Fix: Ajout check token ligne 67

$ npm test auth.test.js  
  auth module
    ‚úì should authenticate valid user (43ms)
    ‚úì should reject invalid token (12ms)
    
‚úÖ VALIDATION: Bug authentification corrig√©
- Fichier: src/auth.js:67
- Change: Ajout `if (!token.valid) return 401`
- Test: auth.test.js:34 passe maintenant
- Dur√©e fix: 3 minutes
```

### Exemple 2: Optimisation
```bash
$ npm run benchmark > before.txt
Average response: 1250ms

$ # Impl√©mentation cache Redis

$ npm run benchmark > after.txt  
Average response: 230ms

‚úÖ VALIDATION: Performance am√©lior√©e
- M√©trique: Temps de r√©ponse API
- Avant: 1250ms (before.txt ligne 8)
- Apr√®s: 230ms (after.txt ligne 8)
- Gain: -81.6%
- M√©thode: Cache Redis (src/cache.js)
- Tests: performance.test.js tous verts
```

## üî¥ Sanctions Non-Respect

### Niveaux de Gravit√©

1. **Avertissement** : Affirmation sans preuve mineure
2. **R√©vision** : Pattern r√©p√©t√© d'affirmations vagues
3. **Escalade** : Hallucination sur √©l√©ment critique
4. **Blocage** : False positive sur tests/s√©curit√©

### Cons√©quences

```markdown
- Perte de confiance utilisateur
- Obligation de re-valider TOUT le travail
- Rollback complet des changements
- Documentation de l'incident
- R√©vision du CLAUDE.md
```

---
**Rappel** : Ce document est OBLIGATOIRE. Le non-respect = √©chec de la t√¢che.

**Voir aussi** : CLAUDE.md | CLAUDE-WORKFLOWS.md | CLAUDE-ERRORS.md