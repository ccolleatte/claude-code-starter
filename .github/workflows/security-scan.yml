name: Security Dependency Scan

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  dependency-scan:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then
          pip install -r requirements.txt
        fi
        # Install security scanning tools
        pip install safety pip-audit
        
    - name: Install Node dependencies
      run: npm ci --only=production
      
    # NPM Security Audit
    - name: NPM Security Audit
      run: |
        echo "🔍 Running NPM security audit..."
        npm audit --audit-level moderate --json > npm-audit-results.json || true
        
        # Check if critical/high vulnerabilities exist
        CRITICAL=$(cat npm-audit-results.json | jq '.vulnerabilities | to_entries[] | select(.value.severity == "critical") | length' 2>/dev/null || echo "0")
        HIGH=$(cat npm-audit-results.json | jq '.vulnerabilities | to_entries[] | select(.value.severity == "high") | length' 2>/dev/null || echo "0")
        
        echo "Critical vulnerabilities: $CRITICAL"
        echo "High vulnerabilities: $HIGH"
        
        if [ "$CRITICAL" -gt 0 ] || [ "$HIGH" -gt 0 ]; then
          echo "❌ Critical or High severity vulnerabilities found!"
          cat npm-audit-results.json | jq '.vulnerabilities'
          exit 1
        else
          echo "✅ No critical or high severity vulnerabilities found"
        fi
        
    # Python Security Audit with Safety
    - name: Python Safety Check
      run: |
        echo "🔍 Running Python Safety check..."
        safety check --json --output safety-results.json || SAFETY_EXIT=$?
        
        if [ -f safety-results.json ] && [ -s safety-results.json ]; then
          # Check for vulnerabilities
          VULN_COUNT=$(cat safety-results.json | jq length 2>/dev/null || echo "0")
          if [ "$VULN_COUNT" -gt 0 ]; then
            echo "❌ Python vulnerabilities found!"
            cat safety-results.json | jq '.'
            exit 1
          fi
        fi
        echo "✅ No Python vulnerabilities found"
        
    # Python Security Audit with pip-audit
    - name: Python pip-audit Check
      run: |
        echo "🔍 Running pip-audit check..."
        pip-audit --format=json --output=pip-audit-results.json || PIP_AUDIT_EXIT=$?
        
        if [ -f pip-audit-results.json ] && [ -s pip-audit-results.json ]; then
          # Check for vulnerabilities
          VULN_COUNT=$(cat pip-audit-results.json | jq '.vulnerabilities | length' 2>/dev/null || echo "0")
          if [ "$VULN_COUNT" -gt 0 ]; then
            echo "❌ pip-audit vulnerabilities found!"
            cat pip-audit-results.json | jq '.vulnerabilities'
            exit 1
          fi
        fi
        echo "✅ No pip-audit vulnerabilities found"
        
    # GitHub Security Advisory Database
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: javascript, python
        
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:javascript,python"
        
    # Dependency Review (PR only)
    - name: Dependency Review
      uses: actions/dependency-review-action@v4
      if: github.event_name == 'pull_request'
      with:
        fail-on-severity: high
        allow-licenses: MIT, Apache-2.0, BSD-2-Clause, BSD-3-Clause, ISC
        
    # Generate Security Report
    - name: Generate Security Report
      if: always()
      run: |
        echo "📊 Security Scan Summary Report" > security-report.md
        echo "=================================" >> security-report.md
        echo "" >> security-report.md
        echo "**Date**: $(date -u)" >> security-report.md
        echo "**Commit**: ${{ github.sha }}" >> security-report.md
        echo "**Branch**: ${{ github.ref_name }}" >> security-report.md
        echo "" >> security-report.md
        
        # NPM Results
        if [ -f npm-audit-results.json ]; then
          echo "## NPM Audit Results" >> security-report.md
          TOTAL_VULNS=$(cat npm-audit-results.json | jq '.metadata.vulnerabilities.total // 0')
          echo "- Total vulnerabilities: $TOTAL_VULNS" >> security-report.md
          
          for severity in critical high moderate low; do
            COUNT=$(cat npm-audit-results.json | jq ".metadata.vulnerabilities.$severity // 0")
            echo "- $severity: $COUNT" >> security-report.md
          done
          echo "" >> security-report.md
        fi
        
        # Python Results
        echo "## Python Security Results" >> security-report.md
        echo "- Safety check: ✅ Completed" >> security-report.md
        echo "- pip-audit check: ✅ Completed" >> security-report.md
        echo "" >> security-report.md
        
        # Overall Status
        echo "## Overall Status" >> security-report.md
        echo "✅ All security scans completed successfully" >> security-report.md
        
    - name: Upload Security Report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-scan-report-${{ github.run_number }}
        path: |
          security-report.md
          npm-audit-results.json
          safety-results.json
          pip-audit-results.json
        retention-days: 30
        
    # Notify on failure
    - name: Security Scan Failed Notification
      if: failure()
      run: |
        echo "🚨 SECURITY ALERT: Vulnerabilities detected in dependencies!"
        echo "Please review the security scan results and update dependencies."
        echo "Scan artifacts are available in the workflow run."